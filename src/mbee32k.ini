%% Display options
%% ===============
%%
%% Screen mode - options are:
%%
%%                   +------------+------------+--------------+----------+
%%                   |   Screen   | Vertically | Horizontally | Use line |
%%                   | resolution | stretched  |  stretched   | doubling |
%% +-----------------+------------+------------+--------------+----------+
%% | screen_mode = 0 | 640x480    | no         | no           | n/a      |
%% | screen_mode = 1 | 800x600    | yes        | no           | yes      |
%% | screen_mode = 2 | 1024x768   | yes        | no           | yes      |
%% | screen_mode = 3 | 1280x1024  | yes        | yes          | yes      |
%% | screen_mode = 4 | 800x600    | yes        | no           | no       |
%% | screen_mode = 5 | 1024x768   | yes        | no           | no       |
%% | screen_mode = 6 | 1280x1024  | yes        | yes          | no       |
%% | screen_mode = 7 | 800x600    | no         | no           | n/a      |
%% | screen_mode = 8 | 1024x768   | no         | no           | n/a      |
%% | screen_mode = 9 | 1280x1024  | no         | no           | n/a      |
%% +-----------------+------------+------------+--------------+----------+
%%
%% NB: - mode 0 seems to be the only mode that works reliably accross most
%%       hardware configurations.
%%     - modes 1-9 often fail when running the dos emulator under windows
%%       2k or newer.
%%     - modes 1-3 (with fill stretching) are not recommended for slower
%%       machines, but tend to look better than modes with unfilled
%%       stretching (ie. modes 4-6).
%%
%% prefer_fullscreen = 0 window used if available
%%                     1 fullscreen used if available
%%
%% bright   = 0-255 sets the brightness (0 = min, 255 = max)
%% contrast = 0-255 sets the contrast (0 = min, 255 = max)
%%
%% mono_type = 0  selects colour mode
%% mono_type = 1  selects greenscreen mode
%% mono_type = 2  selects amberscreen mode
%% mono_type = 3  selects b/w mode
%% mono_type = 4  selects inverted greenscreen mode
%% mono_type = 5  selects inverted amberscreen mode
%% mono_type = 6  selects inverted b/w mode

screen_mode = 0
prefer_fullscreen = 0
bright = 255
contrast = 75
mono_type = 0

%% Sound options
%% =============
%%
%% do_sound = 0 - don't emulate microbee speaker
%% do_sound = 1 - Microbee speaker emulated
%%
%% Advanced PC speaker control options:
%%
%% snd_clock_period_snd = actual clock rate (period in nanoseconds) upon
%%                        which the sound frequency calculation is based.
%% snd_min_freq         = min frequency emulated.

do_sound = 1
snd_clock_period_snd = 296
snd_min_freq = 200
snd_freq_count_error_numer = 1
snd_freq_count_error_denom = 2

%% Parallel port emulation options
%% ===============================
%%
%% pc_lpt_num  = parallel port # (ie. lpt_) - used by bios method
%% pc_lpt_port = if accessing the parallel port directly (no bios) then this
%%               can be used to set the io port to be used.  If 0 then the
%%               io port will be worked out using pc_lpt_num.  Otherwise
%%               this defines the base port to be used.
%%
%% simulate_lpt_pulse: 0 = parallel port pins directly reflect what they
%%                         would on a really old microbee - no fancy stuff
%%                         done.  Pin assignments on the PC are as follows:
%%
%%                          1     = microbee pin 6   ARDY
%%                          2     = microbee pin 5   DATA 0
%%                          3     = microbee pin 12  DATA 1
%%                          4     = microbee pin 4   DATA 2
%%                          5     = microbee pin 11  DATA 3
%%                          6     = microbee pin 3   DATA 4
%%                          7     = microbee pin 10  DATA 5
%%                          8     = microbee pin 2   DATA 6
%%                          9     = microbee pin 7   DATA 7
%%                          10    = microbee pin 15  ASTRB
%%                          11-13 = unused
%%                          14    = logic high
%%                          15    = unused
%%                          16-17 = logic high
%%                          18-25 = 0V
%%
%%                     1 = simulated printer cable port.  This is what you
%%                         want if you want to be able to connect directly
%%                         to a printer.
%%
%%                          1     = microbee pin 6   PSTB
%%                                  (early bees didn't have this signal)
%%                          2     = microbee pin 5   DATA 0
%%                          3     = microbee pin 12  DATA 1
%%                          4     = microbee pin 4   DATA 2
%%                          5     = microbee pin 11  DATA 3
%%                          6     = microbee pin 3   DATA 4
%%                          7     = microbee pin 10  DATA 5
%%                          8     = microbee pin 2   DATA 6
%%                          9     = microbee pin 7   DATA 7
%%                          10    = microbee pin 15  ASTRB
%%                                  (there's an emulation bridge on this)
%%                          11-13 = unused
%%                          14    = logic high
%%                          15    = unused
%%                          16-17 = logic high
%%                          18-25 = 0V
%%
%% Advanced parallel port emulation options:
%%
%% Parallel_response_time_out = # z80 cycles "wait" before z80 out is read.
%% Parallel_response_time_in  = # z80 cycles "wait" before z80 input writes.
%% Parallel_strobe_time       = # z80 cycles for a strobe signal.
%%
%% pc_lpt_pulse_len   = length (in timer_period ms, +/- 1 unit) of ready
%%                      pulse, if one-shot is emulated.
%%
%% beepara_read_granularit = number of cycles between checks if in hardware
%%                           mode.
%%
%% NB: trying to put a signal into the parallel port (eg. an old joystick
%%     setup) is an **EXTREMELY BAD IDEA**.  PC parallel ports are not, in
%%     general, designed have inputs on the data bus.  Attempting this may
%%     result in the emmission of magic smoke.

pc_lpt_num = 1
simulate_lpt_pulse = 1

Parallel_response_time_out = 5
Parallel_response_time_in = 500000
Parallel_strobe_time = 15
pc_lpt_pulse_len = 2
beepara_read_granularit = 50


%% Tape port options
%% =================
%%
%% The microbee uses tone modulation (Kansas city standard) for tape
%% operation, where a 1200Hz tone means "0" and a 2400Hz tone means "1".
%% The specifics of this are defined here.
%%
%% tape_autosave = 0 treat "save" operations the same as pipe operations
%%                   (eg out#2, lprint"hello world").
%%               = 1 autodetect save operations and dynamically re-direct
%%                   to the file given by the filename and extension.

tape_autosave = 1






 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 


%% Emulation specifics (advanced stuff you shouldn't need to edit):
%%
%% These control the details of the emulation.  They may be helpful for
%% fine-tuning the emulation on slower machines, but as a general rule
%% they should be left alone.
%%
%% timer_period = timing interupt interval (in milliseconds).  This interupt
%%                event controls the speaker state and also updates various
%%                timing counters to control the emulation speed.
%%                Options: integers from 1-10 (higher values are possible,
%%                         but not recommended).  Higher numbers may lead
%%                         to poor keyboard response and innacurate sound
%%                         emulation.  otoh, if the computer is very slow
%%                         this is a compromise that might be worth making.
%%
%% max_crtc_granularity = if the emulation is found to be running too slow
%%                        the 6545 emulation functions can be called less
%%                        often (ie. batches of clock cycles at once, rather
%%                        then a few at a time).  This speeds things up, but
%%                        may adversely affect graphics quality (characters
%%                        tend to "split" during animation).  This option
%%                        (a positive integer) puts an upper bound on this
%%                        granularity.  This option affects time periods
%%                        when no (microbee) keys are down.
%% max_crtc_clock_div   = another tactic to speed things up if emulation is
%%                        too slow is to effectively divide the (virtual)
%%                        clock frequency that the 6545 is run at by some
%%                        integer.  The downside of this is that characters
%%                        may sometimes get only partially drawn.  This
%%                        option puts an upper bound on this clock division.
%%                        It must be a power of 2.  This option affects time
%%                        periods when no (microbee) keys are down.
%%
%% clock_period = z80 clock period (nanoseconds, integer value)
%%                all the bees I've seen run at 3.375MHz (although the 256tc
%%                has a hardware option to double this).
%%
%% max_clockovr    = maximum number of cycles the emulation is allowed to
%%                   lag before max_crtc_granularity and max_crtc_clock_div
%%                   are modified to speed things up.
%% max_clockovr_pb = value that clock counter is reset to when this happens.
%%
%% catchup_point = number of clock cycles the emulator can run ahead of
%%                 itself by before inserting a busy wait to let the emulator
%%                 catch up.
%% lag_point     = number of busy times the timer interupt can be called
%%                 during a busy wait before the emulator decides that it
%%                 should try to reduce max_crtc_granularity and
%%                 max_crtc_clock_div to give more accurate emulation.
%%
%% key_refresh_cycles = the number of z80 cycles between keyboard updates.
%%                      Keys (as seen by the microbee) can only be lifted
%%                      during a keyboard update cycle.
%% key_count_start    = When a key is pressed, a counter associated with it
%%                      is set to this value.  This counter is then
%%                      decremented every keyboard update cycle, and when it
%%                      is 0 and the key has been lifted the microbee key
%%                      will be lifted, but not before.  This effectively
%%                      makes very short keypresses "stick" for at least
%%                      key_count_start*key_refresh_cycles*clock_period
%%                      nanoseconds.

timer_period = 1

max_crtc_granularity = 16
max_crtc_clock_div = 1
%max_crtc_granularity = 255
%max_crtc_clock_div = 16

clock_period = 296

max_clockovr = 60000
max_clockovr_pb = 50000

catchup_point = 500
lag_point = 2

key_refresh_cycles = 1000
key_count_start = 100
